ORM 
it stands for object relational mapping
it is a way to query a database without using an actual database query
we use python object to query the database

ORM examples


Let'S take "student" as a db Table.

READ
student = student.objects.all()
print(student)

note:1. if we "get" with the value not present in the table then it raises "DoesNotExistError"
        if we "filter" with the value not present in the table then it returns empty query settings

     2. if we "get" with the value present multiple times in the table then it raises "MultipleObjectReturned" error.
        if we "filter" with the value present multiple times in the table then it gives queryset with multiple objects






CREATE 
student.objects.create(name="name",email="@gmail.com",age=age)


UPDATE
student.objects.filter(name="jon").update(name="john")
student.objects.filter(name="jon").update(name="john")

s.student.objects.get(id=1)
s.age = 69
s.save()

one to many class
student.objects.filter(name="Srijan").update(classroom_id = ClassRoom.objects.get(id=1)) 

student.objects.filter(name="prasim").update(classroom_id = 3)  

c = ClassRoom.objects.get(id=2)                                                         
student.objects.filter(name="prasim").update(classroom_id = c) 


c = ClassRoom.objects.get(id=1)
c.classroom_students.all()


DELETE
student.objects.filter(id=99).delete()
.student.objects.get(id=1).delete()



student.objects.filter(age__gt=30) greater than
student.objects.filter(age__gte=30) equal to
student.objects.filter(age__lt=30) lesser than
student.objects.filter(age__lte=30) equal to

student.objects.filter(id__in=[2,5,1,9]) in specific number 
student.objects.filter(id__range=[1,3]) in range

student.objects.filter(name__contains='a') containing character
 student.objects.filter(name__icontains='J') no case sensitivity

 student.objects.filter(name__endswith='j')
 student.objects.filter(name__iendswith='J')
 student.objects.filter(name__startswith='s')
 student.objects.filter(name__istartswith='S')

student.objects.filter(name='srijan',age=77)

or operator
student.objects.filter(Q(name='srijan')|Q(age=77))

exclude
student.objects.exclude(id=4)
student.objects.exclude(classroom__isnull=False)

student.objects.filter(classroom__isnull=False)

count()
student.objects.all().count()
student.objects.filter(id=3).count()

order by()
student.objects.all().order_by("id")ascending
student.objects.all().order_by(-id")descending

parant to child class
student.objects.all().order_by("name","age") 

student.objects.filter(classroom__name="Two")

StudentProfile.objects.filter(student__name="anukul") 

student.objects.filter(studentprofile__address = "KTM")

ClassRoom.objects.filter(classroom_students__name="srijan") 

if profile is made or not
student.objects.filter(studentprofile__address__isnull = False)



A. Manytomany
Adding
A2.publications.add(P1)
P1.article_set.add(A2) .relatedname for child class


filtering
>>> Article.objects.filter(publications=1) 
<QuerySet [<Article: Article object (1)>, <Article: Article object (2)>]>
>>> Publication.objects.filter(article=1)  
<QuerySet [<Publication: Publication object (1)>, <Publication: Publication object (2)>]>

removing
A2.publications.remove(P1) from child
>>> P1.article_set.remove(A1) from parent

bridge table variable
APT = Article.publications.through
>>> APT.objects.all()